;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Sun May 28 2017
; Processor: ATmega16
; Compiler:  AVRASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      .org 0x00
      jmp RESET_VECTOR
      .org 0x02
      jmp INT0_EXT

INT0_EXT:

      sbi PORTC, PORTC7
      sbi PORTC, PORTC6
      sbi PORTC, PORTC5
      cbi PORTC, PORTC4

      sbis PINC, PINC3
      ldi r21, '0'

      sbis PINC, PINC2
      ldi r21, '1'

      sbis PINC, PINC1
      ldi r21, '2'

      sbis PINC, PINC0
      ldi r21, '3'

      sbi PORTC, PORTC7
      sbi PORTC, PORTC6
      cbi PORTC, PORTC5
      sbi PORTC, PORTC4

      sbis PINC, PINC3
      ldi r21, '4'

      sbis PINC, PINC2
      ldi r21, '5'

      sbis PINC, PINC1
      ldi r21, '6'

      sbis PINC, PINC0
      ldi r21, '7'

      sbi PORTC, PORTC7
      cbi PORTC, PORTC6
      sbi PORTC, PORTC5
      sbi PORTC, PORTC4

      sbis PINC, PINC3
      ldi r21, '8'

      sbis PINC, PINC2
      ldi r21, '9'

      sbis PINC, PINC1
      ldi r21, 'A'

      sbis PINC, PINC0
      ldi r21, 'B'

      cbi PORTC, PORTC7
      sbi PORTC, PORTC6
      sbi PORTC, PORTC5
      sbi PORTC, PORTC4

      sbis PINC, PINC3
      ldi r21, 'C'

      sbis PINC, PINC2
      ldi r21, 'D'

      sbis PINC, PINC1
      ldi r21, 'E'

      sbis PINC, PINC0
      ldi r21, 'F'



      cbi PORTC, PORTC7
      cbi PORTC, PORTC6
      cbi PORTC, PORTC5
      cbi PORTC, PORTC4

      call lcd_init
      mov argument, r21
      call lcd_putchar
      mov temp, r21
      call transmit_data


      reti
RESET_VECTOR:
      sbi DDRC, DDC7
      sbi DDRC, DDC6
      sbi DDRC, DDC5
      sbi DDRC, DDC4
      cbi DDRC, DDC3
      cbi DDRC, DDC2
      cbi DDRC, DDC1
      cbi DDRC, DDC0

      sbi PORTD, PORTD2

      sbi PORTC, PORTC3
      sbi PORTC, PORTC2
      sbi PORTC, PORTC1
      sbi PORTC, PORTC0

      sei

      ; Enable INT0
      in temp, MCUCR
      ldi temp, (1 << ISC11) | (0 << ISC10) | (1 << ISC01) | (0 << ISC00)
      out MCUCR, temp
      in temp, GICR
      ori temp, (1 << INT0)
      out GICR, temp

      ; Setup USART
      ldi temp, (0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM)
      out UCSRA, temp

      ldi temp, (0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (1<<TXB8)
      out UCSRB, temp

      ldi temp, (1<<URSEL) | (0<<UMSEL) | (1<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL)
      out UCSRC, temp

      ldi temp, 0x00
      out UBRRH, temp

      ldi temp, 0x0c
      out UBRRL, temp

      rjmp  Start

      .include "lcd.asm"

;====================================================================
; CODE SEGMENT
;====================================================================
transmit_data:
      sbis UCSRA,UDRE
      rjmp transmit_data
      cbi UCSRB,TXB8
      sbrc r22,0
      sbi UCSRB,TXB8
      out UDR, temp
      ret

Start:
      ; Write your code here

Loop:



      rjmp  Loop

;====================================================================

